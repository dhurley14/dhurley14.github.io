<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Most Significant Byte]]></title>
  <link href="http://dhurley14.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://dhurley14.github.io/"/>
  <updated>2016-02-22T22:54:37-05:00</updated>
  <id>http://dhurley14.github.io/</id>
  <author>
    <name><![CDATA[Devin Hurley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today - 4]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/18/til-4/"/>
    <updated>2015-11-18T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/18/til-4</id>
    <content type="html"><![CDATA[<h3 id="android-and-google-maps-api">Android and Google Maps API</h3>

<blockquote>
  <p>When generating a signed apk for release, that signature needs to be set in the google developer console
where our API key is kept.</p>
</blockquote>

<blockquote>
  <p>Basically we need to map the release build fingerprint (SHA-1) to the google maps API key in the developer
console.</p>
</blockquote>

<h3 id="read-on-for-bonus-til">Read On for BONUS TIL!</h3>

<!--more-->

<blockquote>
  <p>You can remotely enable a Google API for an Android app that has already been released.</p>
</blockquote>

<p>To do this, get the fingerprint and package name of the app by looking at logged errors through the Android 
device in Android Studio.  (Android will log errors when the API calls from your app fail) Once you have these items you can add them to the api by going to
<a href="https://console.developers.google.com/">console.developers.google.com</a>, select “API Manager” in the menu and adding 
the fingerprint to the API you wish to enable.</p>

<p>I learned about this because we pushed a version of Google Maps API for Android to the app store but the fingerprint 
that our release APK was signed with was not the same as the fingerprint that enabled our Google Maps API for Android.</p>

<p>So we needed a way to remotely enable this API in our already existing Android devices.  Pushing a new app signed with 
the correct fingerprint that our Google Maps API was using would not fix this for our users who had already downloaded 
our app.  So I did some digging on the Interwebs and was able to figure this out.  Hopefully this little bit of info 
will help out others in the future!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/11/what-i-learned-at-pomco-today/"/>
    <updated>2015-11-11T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/11/what-i-learned-at-pomco-today</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>People say you learn a lot at a good startup (even if you’re at a crappy startup, you can still take the time to invest in yourself).
I wanted to start a series of blog posts chronicling what I learn, whether in the vein of technology or simple and general life skills, in
the hope that these lessons may be applicable to someone who discovers this blog on the Internet.  </p>

<p>My first lesson I would like to present is about..</p>

<h4 id="the-long-primitive-in-objective-c">The ‘long’ primitive in Objective-C</h4>

<p>The ANSI C-Standard calls for a MINIMUM of <a href="http://stackoverflow.com/a/589684">4 bytes for a long</a>.  However it does not set a maximum.  This is important because
the iPhone 6 and 6S use a long value of 8 bytes, whereas all other iPhones use long values of 4 bytes.  So if you ever create a long that, when printed,
is the correct number on the iPhone 6 or 6S but not on any other previous generation, it’s because your long is not long enough.  You need to use <code>long long</code>.</p>

<p>I learned about this because I was getting the Unix Epoch time and trying to convert that into time since January 1st, 1900.  So when I did the conversion on my 
iPhone 6, the <code>long</code> was able to hold the proper value.  However on any other iOS device predating the iPhone 6, this number would wrap around to negative values
because it was larger than 4 bytes could store.</p>

<p>So kids, remember to run your tests on all the different simulators and devices!</p>
]]></content>
  </entry>
  
</feed>
