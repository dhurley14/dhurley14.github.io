<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Most Significant Byte]]></title>
  <link href="http://dhurley14.github.io/atom.xml" rel="self"/>
  <link href="http://dhurley14.github.io/"/>
  <updated>2017-11-11T21:34:23-05:00</updated>
  <id>http://dhurley14.github.io/</id>
  <author>
    <name><![CDATA[Devin Hurley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exposing Kubernetes Ports]]></title>
    <link href="http://dhurley14.github.io/blog/2017/11/11/exposing-kubernetes-ports/"/>
    <updated>2017-11-11T17:45:04-05:00</updated>
    <id>http://dhurley14.github.io/blog/2017/11/11/exposing-kubernetes-ports</id>
    <content type="html"><![CDATA[<h2 id="loadbalancers-on-kubernetes">LoadBalancers on Kubernetes</h2>

<p><code>kubectl expose deployment categorylinksbot --port=80 --target-port=5000 --type=LoadBalancer</code></p>

<p>Make sure you specify the port the load balancer should listen on, as well as the “target port” to forward traffic from the load balancer to.  <code>--target-port</code> is the port your web app is listening on for requests (flask web apps default to 5000 I think).  <code>--port</code> is the port you wish the load balancer to receive traffic on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching Between Git Users]]></title>
    <link href="http://dhurley14.github.io/blog/2017/11/02/switching-between-git-users/"/>
    <updated>2017-11-02T23:37:41-04:00</updated>
    <id>http://dhurley14.github.io/blog/2017/11/02/switching-between-git-users</id>
    <content type="html"><![CDATA[<h2 id="git-config">Git Config</h2>

<p>Something I had never thought about was exactly how git manages your user configurations.  Luckily I had just the issue that warranted this kind of knowledge!  I wanted to set up another github account which would host a new blog I would be hosting using github pages.  I didn’t want to use my personal account because I’m already hosting this blog there ;)  Anyways I needed to figure out how to manage permissions for pushing to different remote repos between two separate github accounts.</p>

<!--more-->

<p>The way “I” needed to do this (YMMV unfortunately) was by activating a specific user in the <code>.git/config</code> file under my git repo.  When you init a git repo it creates a config file local to that repo.  Git also creates a global configuration file which stores other stuff.  I like to think of these as the git version of <code>nvm</code> (<a href="https://github.com/creationix/nvm">node version manager</a>).  When I’m in different node repos I may want to use different versions of node, which is where nvm comes in.</p>

<p>Same principle for git.  When I am in different github repositories I may need to switch between accounts.  This may all sound very trivial but it’s something I forgot at some point so I wanted to document it.  Anyways, after I uploaded my public ssh key to github, all I  needed to do was add the ssh host in <code>~/.ssh/config</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># githubWork</span>
</span><span class="line">Host work
</span><span class="line">   HostName github.com
</span><span class="line">   User git
</span><span class="line">   IdentityFile ~/.ssh/my_work_account_rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also think you need to add the below to the <code>~/.ssh/config</code> file but I’m not entirely sure.  I’ll have to do some more investigating..</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Host *
</span><span class="line">  AddKeysToAgent yes
</span><span class="line">  UseKeychain yes
</span><span class="line">  IdentityFile ~/.ssh/my_work_account_rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then when I wanted to use this account for a git repo, I would initialize the repo and modify the <code>.git/config</code> file to use </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>core<span class="o">]</span>
</span><span class="line">	<span class="nv">repositoryformatversion</span> <span class="o">=</span> 0
</span><span class="line">	<span class="nv">filemode</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class="line"><span class="nb">	</span><span class="nv">bare</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class="line"><span class="nb">	</span><span class="nv">logallrefupdates</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class="line"><span class="nb">	</span><span class="nv">ignorecase</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class="line"><span class="nb">	</span><span class="nv">precomposeunicode</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class="line"><span class="o">[</span>remote <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class="line">	<span class="nv">url</span> <span class="o">=</span> git@work:myWorkGitAccount/test.git
</span><span class="line">	<span class="nv">fetch</span> <span class="o">=</span> +refs/heads/*:refs/remotes/origin/*
</span><span class="line"><span class="o">[</span>user<span class="o">]</span>
</span><span class="line">	<span class="nv">name</span> <span class="o">=</span> myWorkGitAccount
</span><span class="line">	<span class="nv">email</span> <span class="o">=</span> my_work_email@gmail.com
</span><span class="line"><span class="o">[</span>branch <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class="line">	<span class="nv">remote</span> <span class="o">=</span> origin
</span><span class="line">	<span class="nv">merge</span> <span class="o">=</span> refs/heads/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And presto I was able to push to my remote git repo using my “work” account ;)  I didn’t have to do anything outside of this because the local <code>.git/config</code> file overrides the global file (and the global file overrides the system).  But yeah that’s how it’s done!  I don’t know why I only needed this to manage two github accounts and not when I was setting up my bitbucket repo..  Not sure what happened there.  Some sort of magic maybe?  Eh I’m sure I’ll have to figure that out eventually.  But for now this worked so I’m going to stick with this process for my future needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utilizing Minikube for Debugging]]></title>
    <link href="http://dhurley14.github.io/blog/2017/11/02/utilizing-minikube-for-debugging/"/>
    <updated>2017-11-02T23:29:33-04:00</updated>
    <id>http://dhurley14.github.io/blog/2017/11/02/utilizing-minikube-for-debugging</id>
    <content type="html"><![CDATA[<ol>
  <li><code>minikube start</code></li>
  <li>from the same terminal window you ran minikube start run <code>eval $(minikube docker-env)</code></li>
  <li>again, from the same terminal window, run your docker build command</li>
  <li>update your deployment spec’s [1] pod to point to the local docker image, whatever you tagged it as.</li>
  <li>update your deployment spec’s imagePullPolicy to be Never (<code>imagePullPolicy: Never</code>)</li>
  <li>kubectl create -f deployment_spec.yaml</li>
  <li>wait for the pods to get created (should not take long)</li>
  <li>expose a loadbalancing service via <code>kubectl expose deployment mydeployment --type="LoadBalancer"</code></li>
  <li>see [2]</li>
  <li>Generally, cloud providers will then provide an ip address for access to the service.  However since this is minikube there isn’t anyone assinging IP’s to anything.  Minikube allows you to simulate this by running <code>minikube service &lt;load balancer from step 9&gt;</code> and it will attempt to open a web page to your service.</li>
  <li><a href="https://www.youtube.com/watch?v=KOO5S4vxi0o">These go to 11.</a></li>
</ol>

<p>[1] get your deployment spec from remote <a href="http://dhurley14.github.io/blog/2017/10/29/gcp-export-kubernetes-deployment/">see here</a></p>

<p>[2]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">kubectl get services
</span><span class="line">NAME               TYPE           CLUSTER-IP   EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>          AGE
</span><span class="line">mydeployment   LoadBalancer   10.0.0.40    &lt;pending&gt;     5000:32711/TCP   5s
</span><span class="line">kubernetes         ClusterIP      10.0.0.1     &lt;none&gt;        443/TCP          13m
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Cloud_sql_proxy Pod]]></title>
    <link href="http://dhurley14.github.io/blog/2017/11/01/how-to-cloud-sql-proxy-pod/"/>
    <updated>2017-11-01T22:54:58-04:00</updated>
    <id>http://dhurley14.github.io/blog/2017/11/01/how-to-cloud-sql-proxy-pod</id>
    <content type="html"><![CDATA[<p>So I don’t have to google this every time..  <strong>Make sure you stop your local postgres instance</strong>.</p>

<p>Run this command to open a tunnel to the cloud sql instance in GCP.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cloud_sql_proxy -instances<span class="o">=</span>&lt;INSTANCE_NAME&gt;<span class="o">=</span>tcp:5432 -credential_file<span class="o">=</span>&lt;CRED_FILE&gt; <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if the connection was successful you should now be able to tunnel into the remote cloud sql instance using…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">psql <span class="s2">&quot;host=127.0.01 sslmode=disable dbname=&lt;DB_NAME&gt; user=&lt;DB_USER&gt; password=&lt;DB_PASS&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCP Export Kubernetes Deployment]]></title>
    <link href="http://dhurley14.github.io/blog/2017/10/29/gcp-export-kubernetes-deployment/"/>
    <updated>2017-10-29T19:54:51-04:00</updated>
    <id>http://dhurley14.github.io/blog/2017/10/29/gcp-export-kubernetes-deployment</id>
    <content type="html"><![CDATA[<h2 id="gke-custom-deployments">GKE Custom Deployments</h2>

<p>The Google Container Engine (GKE) + Google Compute Engine codelab (aside from the <a href="https://codelabs.developers.google.com/codelabs/cloud-compute-kubernetes/index.html?index=..%2F..%2Findex#0">codelab</a> being in dire need of some updates, see this issue <a href="https://github.com/googlecodelabs/feedback/issues/243">here,</a> <a href="https://github.com/googlecodelabs/feedback/issues/250">here,</a> and <a href="https://github.com/googlecodelabs/feedback/issues/274">here</a>) does not provide any introduction to kubernetes <code>deployments</code>. K8s deployments are built using yaml files. Manually customizing this yaml file allowed me to more easily manage secrets securely, among other benefits.</p>

<!--more-->

<p>When you start going through tutorials on how to deploy and manage your containers with kubernetes you end up running a bunch of <code>kubectl</code> (cube-control?) commands. These all basically map to updating text in a yaml file. Sometimes it would be easier to just write the necessary yaml out by hand. In order to do this you need some place to start. Luckily <code>kubectl</code> allows you to export all of the commands you’ve run against your k8s deployment into a file. This was exactly what I needed. I already had a kubernetes cluster running in GKE with a container running my app code. Now I needed to set up the necessary secrets and add another container in my pod so that I could access my Postgres Cloud SQL instance.</p>

<p>Here is the code that let me export my k8s deployment.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">kubectl get deployment myawesomedeployment -o yaml --export &gt; k8s_deployment_config.yaml
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>kubectl</code> docs have a more thorough listing of all <a href="https://kubernetes.io/docs/user-guide/kubectl/v1.8/#get">available options</a> for exporting deployments, among other things.</p>

<p>You don’t necessarily need a deployment configuration file to, say, update one of the containers running in a pod. However if you want to quickly add another container to your pod, along with some other settings (like a SECRET!!!…) without running seven different <code>kubectl</code> commands (and trying to remember them all for future deployments), a deployment configuration file will help you swiftly accomplish this.</p>

<p>This is mostly just a post for helping me when I need to remember how to do this again, but maybe it will help someone else too!</p>

<p>My next post will explain how to deploy and interact with secrets in your Docker container through the kubernetes secrets object configuration. Google has a <a href="https://cloud.google.com/sql/docs/postgres/connect-container-engine#5_create_your_secrets">basic introduction</a> to the usage of secrets in your application in order to store and access database credentials.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Equity]]></title>
    <link href="http://dhurley14.github.io/blog/2016/02/21/how-to-equity/"/>
    <updated>2016-02-21T14:36:29-05:00</updated>
    <id>http://dhurley14.github.io/blog/2016/02/21/how-to-equity</id>
    <content type="html"><![CDATA[<h2 id="hark-an-angel">Hark! An Angel!</h2>

<p>So recently I was asked by a close friend if I could help him understand his total compensation package.  The problem was how to project how much equity he needed in order to make back the money he was missing out on based on a market rate salary.  I ended up generalizing his situation and felt it might help others out if I posted the solution here.  So here is my explanation on how to calculate how much equity you (as an early startup employee) will need in order to make up for a loss in salary, assuming the startup cannot afford to pay you a market-rate salary.</p>

<p>Being purely logical, the output of this equation is what you should expect.  Most founders will not offer you this but this is a great tool to help get a 
general understanding of how much money you would need to make back on a liquidation event at your startup up when you take on an under market salary in exchange for equity.</p>

<!-- more -->

<p>After doing an explicit example (with a bit of help from a stranger on the Internet) I generalized the specific outcomes so that it could help others who find themselves in similar situations.  YMMV.</p>

<h2 id="how-to-101-market-rate-salary">How to 101: Market Rate Salary</h2>

<p>Let’s say you’re interviewing at a startup and the company offers you some salary POST-TAX which we will call <script type="math/tex">s_{0}</script>, and stock options.  Given that salary 
(<script type="math/tex">s_{0}</script>), how do you come up with an appropriate amount of options that will givey you a return on the investment of an undermarket salary along 
with the risk of joining an early stage (pre series A) startup?  </p>

<p>Looking at your offered salary of <script type="math/tex">s_{0}</script>, let’s say a market salary for your position (POST-TAX) is actually <script type="math/tex">s_{m}</script>.  Feel free to insert numbers as we go along or follow along until the end of the post where we reach our final model from basic principles.
Assuming you work at this startup for <script type="math/tex">N</script> years you will give up approximately…  </p>

<script type="math/tex; mode=display">
[(s_{m} - s_{0}) \cdot N]
</script>

<p>in salary.  This step is important, so take some time and really try to simulate just how much salary you are giving up.  Your market rate should jump every year
 or so as the rate at which you learn at a startup is exponentially faster than at BigCo.<br />
So to figure out how much equity you would need to make up for that loss of salary, you would just take that number, divide it by the startup’s optimal outcome,
which we will call <script type="math/tex">\Omega</script> (say the company sells for 18 Billion <code>USD</code>, <script type="math/tex">\Omega \equiv 18\,Billion</script>), and now you’re done!</p>

<p>… Except you probably haven’t filed an 83b, subject to <a href="https://en.wikipedia.org/wiki/Alternative_minimum_tax">AMT</a> which in the U.S. is approximately 35% so you’ll want to account for that in your calculation</p>

<script type="math/tex; mode=display">
\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.35)}{\Omega}
</script>

<p>You should also consider the strike price for these options as well, as you will need to spend your post-tax salary to purchase those, and include some dilution factor (a conservative value is 25% over 4 years, which is 6.25% per year so you’ll need to calculate that by hand to really figure out what constant to use.  Let’s up this value from <script type="math/tex">1.35</script> to <script type="math/tex">1.60</script> to help insulate us from this.  Now that we know what we need AT EXIT, we’re all set? Right? Right?!?! </p>

<h2 id="exit-to-the-right-of-the-aircraft">Exit to the Right of the Aircraft</h2>

<p>So given our optimal outcome <script type="math/tex">\Omega</script> we need to calculate the risk of not hitting that target.  Instead of using this pure value we should weigh it according to the probability of <script type="math/tex">\Omega</script> actually occurring.  Our expected outcome will now be <script type="math/tex">p(\Omega) \cdot \Omega</script>.  So our new equation for our necessary equity becomes…</p>

<script type="math/tex; mode=display">
\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.60)}{p(\Omega) \cdot \Omega}
</script>

<p>This will give us a nice buffer in case we miss this optimal target.  HOWEVER THIS IS STILL JUST TO BREAK EVEN.
The idea is to get a nice upside for lowering your standard of living for <script type="math/tex">N</script> years along with the increased stress and work necessary for helping to build a company.  So, let’s double this value</p>

<script type="math/tex; mode=display">
2 \cdot \left (\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.60)}{p(\Omega)\cdot\Omega}  \right )
</script>

<p>This will represent how much (logically) you would be within your right to ask for. </p>

<p>To calculate how much this percent will represent after debt is paid down and taking into account the preferred shareholders stake (assuming this represents about 25% of the pie), I’m assuming 25% of the outcome  will go to preferred stock holders and other forms of debt, before it reaches ESOs.</p>

<script type="math/tex; mode=display">
0.75 \cdot \left (2 \cdot \left (\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.60)}{p(\Omega)\cdot\Omega}  \right ) \right )
</script>

<p>This equation will approximate how much of the company you will truly own by the time your company exits.</p>

<h3 id="tldr">TL;DR</h3>

<script type="math/tex; mode=display">0.75 \equiv Percent\, common\, stock\, options\, represent\, out\, of\, total\, options\, pool. </script>

<script type="math/tex; mode=display">2 \equiv Upside</script>

<script type="math/tex; mode=display">s_{m} \equiv Market\, salary\, for\, your\, position.</script>

<script type="math/tex; mode=display">s_{0} \equiv Salary\, offered.</script>

<script type="math/tex; mode=display">1.60 \equiv AMT\, and\, 6.25%\, dilution\, /\, annum.</script>

<script type="math/tex; mode=display">\Omega \equiv Outcome\, of\, Exit</script>

<script type="math/tex; mode=display">p(\Omega) \equiv Probability\, of\, outcome.</script>

<script type="math/tex; mode=display">
2 \cdot \left (\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.60)}{p(\Omega)\cdot\Omega}  \right ) \equiv How\, many\, points\, to\, ask\, for
</script>

<p>… and finally, what you can reasonably expect your points to represent out of the total <script type="math/tex">\Omega</script> left over after debt and prefferred shareholders get their 
slice …
<script type="math/tex">
0.75 \cdot \left (2 \cdot \left (\frac{[(s_{m} - s_{0}) \cdot N] \cdot (1.60)}{p(\Omega)\cdot\Omega}  \right ) \right )
</script></p>

<h2 id="conclusion">Conclusion</h2>

<p>You should never join a startup because you want to be rich.  Join one because you will have responsibilities you would have to wait 10+ years to have; join one 
because you like the people that started the company;  join one because you will be forced to jump out of your comfort zone; join one because you want to test
yourself.  Do not join one if your dream is to get rich.  There are far easier and safer ways to do this.  However, there should be decent payout for the fact that you did take a risk, imbued some amount of increased stress, and possibly damaged a few relationships along the way.</p>

<p>The obvious objective is to secure a market salary in the first place.  At this point any options would simply be icing on the proverbial cake.  However sometimes 
this is not possible so you have to take a salary cut.  This post is designed to help you as an early startup employee prevent yourself from becoming <a href="http://www.nytimes.com/2015/12/27/technology/when-a-unicorn-start-up-stumbles-its-employees-get-hurt.html?_r=0">one</a> of <a href="http://blog.nawbo-sv.org/incentive-stock-option-horror-story/">these</a> other <a href="http://venturebeat.com/2012/02/27/a-classic-startup-horror-story-the-ma-bait-and-switch/">guys</a></p>

<p>I hope this helps some people out there with difficult decisions to make.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Michael Nielsen How Bitcoin Works]]></title>
    <link href="http://dhurley14.github.io/blog/2016/02/11/michael-nielsen-how-bitcoin-works/"/>
    <updated>2016-02-11T18:54:13-05:00</updated>
    <id>http://dhurley14.github.io/blog/2016/02/11/michael-nielsen-how-bitcoin-works</id>
    <content type="html"><![CDATA[<h1 id="how-bitcoin-works">How Bitcoin Works</h1>

<p>So I recently finished reading / taking notes on a <a href="http://www.michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/">blog post</a> from Michael Nielsen.
In it he builds up the ideas of the block chain from basic principles.  He goes over the specifics of the Bitcoin block chain but the 
theory is applicable to other networks such as Ethereum. </p>

<p>An understanding of how both <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public key cryptography</a> and <a href="https://en.wikipedia.org/wiki/Digital_signature#Definition">digital signatures</a> work is pretty necessary to truly understand everything in the blog post.
  The Wikipedia pages for these concepts are fairly comprehensive and don’t take much time to absorb the general ideas, which is all you really need for Nielsen’s post.</p>

<p>If you have been interested in how block chain technology works, along with the underlying concepts that make up the block chain, I would highly suggest this blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today 5]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/19/what-i-learned-at-pomco-today-5/"/>
    <updated>2015-11-19T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/19/what-i-learned-at-pomco-today-5</id>
    <content type="html"><![CDATA[<blockquote>
  <p>The SWRevealController makes for an excellent user experience when you need to add menu options to your iOS app.</p>
</blockquote>

<p>The SWRevealController..</p>

<!--more-->
<p>Provides some really nice functionality for utilizing screen real estate with nice animations.
The tutorial <a href="http://www.appcoda.com/ios-programming-sidebar-navigation-menu/">here</a> discusses in detail 
how to set up a menu screen that functions similarly to the sidebar menu in the Facebook app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today - 4]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/18/til-4/"/>
    <updated>2015-11-18T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/18/til-4</id>
    <content type="html"><![CDATA[<h3 id="android-and-google-maps-api">Android and Google Maps API</h3>

<blockquote>
  <p>When generating a signed apk for release, that signature needs to be set in the google developer console
where our API key is kept.</p>
</blockquote>

<blockquote>
  <p>Basically we need to map the release build fingerprint (SHA-1) to the google maps API key in the developer
console.</p>
</blockquote>

<h3 id="read-on-for-bonus-til">Read On for BONUS TIL!</h3>

<!--more-->

<blockquote>
  <p>You can remotely enable a Google API for an Android app that has already been released.</p>
</blockquote>

<p>To do this, get the fingerprint and package name of the app by looking at logged errors through the Android 
device in Android Studio.  (Android will log errors when the API calls from your app fail) Once you have these items you can add them to the api by going to
<a href="https://console.developers.google.com/">console.developers.google.com</a>, select “API Manager” in the menu and adding 
the fingerprint to the API you wish to enable.</p>

<p>I learned about this because we pushed a version of Google Maps API for Android to the app store but the fingerprint 
that our release APK was signed with was not the same as the fingerprint that enabled our Google Maps API for Android.</p>

<p>So we needed a way to remotely enable this API in our already existing Android devices.  Pushing a new app signed with 
the correct fingerprint that our Google Maps API was using would not fix this for our users who had already downloaded 
our app.  So I did some digging on the Interwebs and was able to figure this out.  Hopefully this little bit of info 
will help out others in the future!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIL - 3]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/13/til-3/"/>
    <updated>2015-11-13T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/13/til-3</id>
    <content type="html"><![CDATA[<blockquote>
  <p>It is far easier to adopt someone else’s opinion than to do the work required to formulate one for yourself.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/12/what-i-learned-at-pomco-today/"/>
    <updated>2015-11-12T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/12/what-i-learned-at-pomco-today</id>
    <content type="html"><![CDATA[<h4 id="overheard-in-the-office">Overheard in the office..</h4>

<blockquote>
  <p>The most profound way to convince people of something is to just ask questions</p>
</blockquote>

<p>I do not know if this is true in the general sense, but it is most certainly true for enterprise sales.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned at POMCO Today]]></title>
    <link href="http://dhurley14.github.io/blog/2015/11/11/what-i-learned-at-pomco-today/"/>
    <updated>2015-11-11T00:00:00-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/11/11/what-i-learned-at-pomco-today</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>People say you learn a lot at a good startup (even if you’re at a crappy startup, you can still take the time to invest in yourself).
I wanted to start a series of blog posts chronicling what I learn, whether in the vein of technology or simple and general life skills, in
the hope that these lessons may be applicable to someone who discovers this blog on the Internet.  </p>

<p>My first lesson I would like to present is about..</p>

<h4 id="the-long-primitive-in-objective-c">The ‘long’ primitive in Objective-C</h4>

<p>The ANSI C-Standard calls for a MINIMUM of <a href="http://stackoverflow.com/a/589684">4 bytes for a long</a>.  However it does not set a maximum.  This is important because
the iPhone 6 and 6S use a long value of 8 bytes, whereas all other iPhones use long values of 4 bytes.  So if you ever create a long that, when printed,
is the correct number on the iPhone 6 or 6S but not on any other previous generation, it’s because your long is not long enough.  You need to use <code>long long</code>.</p>

<p>I learned about this because I was getting the Unix Epoch time and trying to convert that into time since January 1st, 1900.  So when I did the conversion on my 
iPhone 6, the <code>long</code> was able to hold the proper value.  However on any other iOS device predating the iPhone 6, this number would wrap around to negative values
because it was larger than 4 bytes could store.</p>

<p>So kids, remember to run your tests on all the different simulators and devices!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSJ3: Russia and Saudi Arabia to Continue Pumping Oil]]></title>
    <link href="http://dhurley14.github.io/blog/2015/10/07/wsj3-russia-and-saudi-arabia-to-continue-pumping-oil/"/>
    <updated>2015-10-07T20:40:12-04:00</updated>
    <id>http://dhurley14.github.io/blog/2015/10/07/wsj3-russia-and-saudi-arabia-to-continue-pumping-oil</id>
    <content type="html"><![CDATA[<h3 id="by-georgi-kantchev-and-summer-said-october-3rd-2015">By Georgi Kantchev and Summer Said (October 3rd, 2015)</h3>

<h3 id="article-summary">Article Summary</h3>

<p>Russia is aggressively pumping oil from its wells at a rate of 10.74 million barrels a day.  Saudi Arabia will continue to pump oil and gas at a rate above 10 million barrels a day, which has continued to fuel the significant drop in oil prices.  Oil prices have dropped &gt; 50% since July of 2014.  Supply outpaces demand globally by approximately 2 million barrels a day.  The IMF expects the Saudi government will run a budget deficit of 19.5% of GDP.  Last year the Saudi government’s deficit was 3.4% of GDP.
<!--more--></p>

<p>The increase in the global supply of oil has left nations such as Venezuela and Nigeria, who are dependent on oil revenue, flailing to keep their finances in line.  The depreciation of the ruble has left oil companies in Russia a better margin buffer than American-based shale companies.  The level of output Russia is expected to produce this year was last seen at the end of the Soviet Union.</p>

<h2 id="analysis">Analysis</h2>

<p>Russia and Saudi Arabia are launching a type of economic war against the greater global economy (despite the detrimental effects this will have for their own economies).  This is aiding a global slowdown in demand, since oil and gas contribute to the production of goods.  As oil prices fall oil companies begin pulling back on investments.  Specifically, American shale companies have shut down and laid off thousands.  Offshore drilling companies have had their own layoffs to deal with as their margins shrank abruptly.  This has ripple effects in industries that produce materials for the maintenance and construction of oil rigs.  With Russia and Saudi Arabia oversupplying the globe with crude, businesses in the industry are forced to downsize drastically.</p>

<p>America needs greater independence from oil producing nations.  These nations are the true achilles heel to America’s economic stability.  Investments in alternative sources of energy by the government would placate the effects the Russians and Saudis are having on America’s future growth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSJ2: China's President Courts U.S. CEOs]]></title>
    <link href="http://dhurley14.github.io/blog/2015/09/28/wsj2-chinas-president-courts-u-dot-s-ceos/"/>
    <updated>2015-09-28T22:47:49-04:00</updated>
    <id>http://dhurley14.github.io/blog/2015/09/28/wsj2-chinas-president-courts-u-dot-s-ceos</id>
    <content type="html"><![CDATA[<h3 id="chinas-president-courts-us-ceos">China’s President Courts U.S. CEOs</h3>

<h4 id="by-shira-ovide-and-jeremy-page">By Shira Ovide and Jeremy Page</h4>

<p>President Xi Jinping is looking to increase investment in China through promoting China’s increased demand.  U.S. companies have long been wary of exporting goods to China due to lacking intellectual property laws and general market access.
President Xi Jinping seeks lower restrictions in his country to allow for the U.S. to increase high-tech exports to China, as well as lowering the barries to investment in general in the nation.
Mr. Xi gave a speech outlining all of this after a conference with CEOs from Chinese and U.S. corporations.  Among the people present were Tim Cook, Satya Nadella and Jeff Bezos.  High-tech Chinese companies including Jack Ma (Alibaba), Pony Ma (Tencent Holdings) and Robin Li (Baidu) were also in attendance.  Mr. Xi’s claims China’s allure for high-tech U.S. companies should be the huge population that utilizes internet connected devices.  Mr. Xi says China is home to 600 million Internet users and 1.2 billion mobile phone users.
<!--more--></p>

<p>Such a large market for consumer electronic devices and China’s seemingly wholehearted approach to economic openness and increased free trade should have companies jumping at China’s heels.  Unfortunately for the general Chinese populace, their government has been behind some massive attacks on U.S. companies, most recently and dramatically the attack on <a href="http://blog.erratasec.com/2015/04/pin-pointing-chinas-attack-against.html">GitHub</a>.
The general attacks on U.S. companies by the Chinese and other worries, such as intellectual property theft and determining whether the market demand actually exists for consumer electronics has kept U.S. companies steadfast in their cautious approach to expanding to The Far East.  It is this author’s opinion that this move by Mr. Xi was in fact an appeal to the nations at large that China’s economy is not propped up by massive IPOs and the government, but a natural demand flows within the nation.  Through increasing foreign investment into China, China no longer has to prop up its economy and can rely on foreign investment to do the dirty work.  If U.S. companies do bite, China will be forced to buy more U.S. dollars (so that China can purchase U.S. goods), forcing the dollar to rise in purchasing power.  Kind of like what happened with Germany and the Euro.</p>

<p>A weak currency generally allows for a nations’ exports to become cheaper.  When a nation has more exports than imports, it is said to have a surplus.  How do countries devalue their currency so that it does not become so expensive that it’s citizens can no longer afford to own it? By “printing” more of it and flooding the market!  However, the Eurozone has not done this.  Instead as it (Germany specifically) exported more and more, it did not try to keep the currency at a lower exchange rate (as Greece, Spain, Italy etc. would have preferred it) and allowed it to increase in strength.  This was great for Germany.  As its’ goods became more expensive to purchase while exports continued to flow out of the country, Germany racked up a trade surplus and a stronger currency. Greece, Italy, Portugal, Spain and a host of other countries that depended on the Euro got pushed into the mud at the expense of Germany’s power grab. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSJ Weekly Economics Post]]></title>
    <link href="http://dhurley14.github.io/blog/2015/09/19/wsj-econ-post-1/"/>
    <updated>2015-09-19T14:25:51-04:00</updated>
    <id>http://dhurley14.github.io/blog/2015/09/19/wsj-econ-post-1</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>When I was an undergrad I had an economics professor (for four semesters, this guy knew his stuff) who had us read the Wall Street Journal every day.
The purpose of this was for us to find an article to summarize at the end of the week and then write a quick analysis using ideas or models or theories or what have you.  The real purpose, I think, was so that as students we would have a continual surface level understanding of everything that was happening in the world.
It’s been a while since I last wrote an analysis like that.  I enjoyed writing them in college so I figured it would be a good idea to keep on doing these.
My end goal in doing this is to keep up with the changing global economic landscape.</p>

<!--more-->

<h2 id="us-household-wealth-set-record-in-second-quarter">U.S. Household Wealth Set Record in Second Quarter</h2>

<h3 id="wsj-sept-19th-2015">WSJ Sept. 19th, 2015</h3>

<h3 id="by-josh-zumbrun">By Josh Zumbrun</h3>

<p>The net worth of U.S. households has risen <code>$</code> 695 billion from last quarter to <code>$</code> 85.7 trillion, according to a Fed report on Friday.  During The Great Recession overall household wealth dropped by $13 trillion.  Since then, rising stock prices and home values have risen to a record 30 trillion dollars since 2009.  This rise in stocks, bonds, home values and other assets has been fueled in part by ultralow interest rates set by the Fed along with QE.  The Fed expected a rise in household wealth would generate a wealth effect and result in increased consumption.  While stocks and other assets have risen, economic growth has been lackluster.  Household wealth has recorded at 4.8 times the nation’s GDP this quarter.  Between 1950 and the 1990’s net household wealth ran between 3 and 4 times as high as GDP.  The three times the ratio has risen above 4x GDP was at the height of the dot-com boom, the 2004-2007 housing bubble and over the past 5 years.</p>

<p>There are two parts to the equation of a recover.  One part is the Fed setting the funds rate to 0 to allow banks to make loans at lower interest rates.  This should provide an incentive for businesses to increase investment (such as expansions, opening new factories etc..).  The second part of the equation to a recovery is jobs creation.  By creating more jobs (e.g. infrastructure projects), consumption would increase.  When consumption increases while interest rates are low, businesses will be more inclined to increase their investments in their businesses and expand.  You can’t have an economic expansion by just having low interest rates.  If you just have low interest rates, you end up with household wealth running at a rate of 4.8x GDP.  These are unsafe levels. GDP growth has been lackluster in general and this has not helped the Fed with their decisiont to try to raise interest rates.  The lack of consumption shows that there is still slack in the economy and with a 14.8% poverty rate (a figure little changed since 2009) and a 58% rise in household wealth since 2009, the economy still appears shaky.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Bidding Up Tech Shares]]></title>
    <link href="http://dhurley14.github.io/blog/2015/07/25/on-bidding-up-tech-shares/"/>
    <updated>2015-07-25T11:54:42-04:00</updated>
    <id>http://dhurley14.github.io/blog/2015/07/25/on-bidding-up-tech-shares</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<ol>
  <li>Googles’ shares rose 16% on Friday (2015-07-17) after the company said revenue was up 11% from a year earlier.</li>
  <li>Netflix rose 18% on Thursday (2015-07-16) after 2nd quarter revenue rose 22%</li>
  <li>Amazon announced it’s revenue on Thursday (2015-07-23) had risen 20%, resulting in a record high price on Friday of $580.57.</li>
  <li>Facebook is expected to announce its earnings on the 29th of July.</li>
  <li>The Nasdaq is up 10% this year, reaching a new record on Friday (2015-07-17).</li>
</ol>

<p>Looks pretty good for the technology sector.  The rest of the sectors ain’t doing so hot though..
<!--more--></p>

<h2 id="whats-a-poor-boy-to-do">What’s a poor boy to do?</h2>
<p>The Nasdaq’s rise is a result of the percentage of tech stocks that make up the index.  Compare this to the S&amp;P500, which rose
3.3% this year and still remains below highs reached in May.  Given approximately 50% of the composition of the Nasdaq index is made up of tech companies
while the S&amp;P 500 is made up of ~20% tech stocks, there is evidence of an impending tech bubble for these public stocks.  But is it really a bubble?</p>

<p>The evidence to look for lies in the lack of high-achieving performance in the wider economy.  Sales and earnings in many sectors of 
the economy are flat or falling, making investment in tech stocks mroe appealing than they previously (&lt; 2000 A.D.) were.</p>

<p>Many portfolio managers say they are willing to pay such high prices for these tech stocks because their (the managers’) expectations of growth
for the tech companies outweighs the up-front costs to owning these shares.  Growth is becoming more scarce in the global economy.
Quarterly revenue at S&amp;P500 companies is estimated to have dropped 4% from a year ago in the 2nd quarter (via FactSet).</p>

<p>For example, Google shares have been trading at 24.9x last 12 months earnings;  Netflix is trading at 257.8x 12 months’ earnings and Facebook
is trading at 52.5x.</p>

<p>The wide availability of V.C. funding for smaller, faster-growing companies allows these companies to stay private for far longer.  Forcing
public investors to push more money into already public stocks, because they have no other outlet for the money they wish to invest in technology.
Thus raising the public tech shares even higher.</p>

<h2 id="so-whats-the-solution">So what’s the solution?</h2>
<p>There is currently no way for the general public to offer investments in to these private, smaller, faster-growing companies.  By the time these companies
do go public, the opportunity for huge growth has already passed by, and the general public misses out.  No true solution exists.  The best way to be 
sure to not lose money is not to bet, but that’s like saying the best way to not die in a car accident is not go outside.  I can’t offer a solution but
evidence and analysis of a problem could potentially help some others discover a better strategy than the continual bidding up of the same Big Co Tech Stocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting iPhone SMS Backups]]></title>
    <link href="http://dhurley14.github.io/blog/2015/02/09/extracting-iphone-sms-backups/"/>
    <updated>2015-02-09T13:09:40-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/02/09/extracting-iphone-sms-backups</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>A few weeks ago my girlfriend had the idea of going back and seeing our first text messages to each other.
Obviously we send each other quite a few messages a day, so just scrolling all the way back in time on the iPhone
was out of the question.  I still thought this was a really neat idea and remembered during the winter of 2013 I had bought <a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579/">“Violent Python”</a> by TJ O’Connor.<br />
In this book, Mr. O’Connor presents code to delve into the iPhone’s SMS backups that are stored on the computer.<br />
I did this exercise back in 2013 and forgot about the code up until now.  This post will detail the issues I ran into 
while trying to extract the data.</p>

<!--more-->

<h2 id="running-violent-python-code">Running Violent Python code</h2>

<p>By running the violent python code for <a href="https://github.com/shadow-box/Violent-Python-Examples/blob/master/Chapter-3/7-iphoneMessages.py">extracting sms messages</a> I was able to see the database tables but not access them.
I was getting an error message when I tried to open the tables up using the sqlite terminal application.  The error
that kept coming through was </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="Bash"><span class="line">devin<span class="nv">$ </span>sqlite3 3d0d7e5fb2ce288813306e4d4636395e047a3d28
</span><span class="line">SQLite version 3.6.12
</span><span class="line">Enter <span class="s2">&quot;.help&quot;</span> <span class="k">for</span> instructions
</span><span class="line">Enter SQL statements terminated with a <span class="s2">&quot;;&quot;</span>
</span><span class="line">sqlite&gt; .table
</span><span class="line">Error: file is encrypted or is not a database
</span><span class="line">sqlite&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After quite a bit of googling around trying to figure out how to decrypt the sms database, I found out that the reason 
I was getting this error was due to the fact that I was running an older version of sqlite3, and that the database wasn’t
actually encrypted.  I couldn’t quite find any reliable ways of upgrading sqlite3 so I just upgraded my Python installation 
to 2.7.9 (I was previously running 2.7.3, oops :).</p>

<p>This successfully displayed the ‘message’ database that the iPhone uses to store historical texts.  To extract them I ran this
<a href="https://github.com/toffer/iphone-sms-backup/blob/master/sms-backup.py">script</a> which is more robust than the example script presented
in Violent Python.  After doing so I was left with all of my messages from my girlfriend (after passing in the appropriate parameters 
when I ran the script in the terminal, see usage <a href="https://github.com/toffer/iphone-sms-backup/blob/master/README.md">here</a>)  </p>

<h2 id="conclusions">Conclusions</h2>
<p>Unfortunately my very first texts to my girlfriend were not in the database.  I am not fully sure at what point the iPhone begins
to remove the oldest messages from its ‘message’ database but I would be surprised that our conversation history had reached a point
where the iPhone decided it needed to remove that first month of conversations.</p>

<p>I wrote this post to help people out as it seemed there were many people running into this issue ‘db encryption’ issue while
trying to extract sms data from the iPhone’s backup database.  Hopefully this helps out for this wishing to do the same
in the future!  I will continue to try to uncover why some of my backup messages are missing.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Leontief IO Model]]></title>
    <link href="http://dhurley14.github.io/blog/2015/02/08/leontif-input-output-model/"/>
    <updated>2015-02-08T22:03:52-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/02/08/leontif-input-output-model</id>
    <content type="html"><![CDATA[<h2 id="background-motivation">Background Motivation</h2>
<p>Oil prices have been falling dramatically.  Oil prices are now at 40% of what they started FY 2014 off.
The fall in oil prices has been a result of increasing shale oil production in the United States and 
softening global demand.  Falling oil prices are part of a global phenomenon of deflation.<br />
The United States is far off the Federal Reserve’s goal of 2% inflation (currently up 0.7% in December 2014 from a year earlier).
Being able to predict demand is imperative to all sectors of an economy.  In this post I will introduce the
Leontief IO model and examine just how accurate it can be at predicting demand using historical data from the <a href="http://bea.gov/industry/io_annual.htm">BEA</a></p>

<p>This post will contain an introduction to the components of the model.  I will present a basic example using fictional data.
I will then present a model utilizing real world data.  In a future post I will build a new model that can be used to predict values of 
sector production <script type="math/tex">\hat{x}</script> using statistics and the Fourier transform.</p>

<!--more-->

<h2 id="enter-the-leontief-input---output-model">Enter the Leontief Input - Output Model</h2>
<p><a href="https://en.wikipedia.org/wiki/Input%E2%80%93output_model#Basic_derivation">The Leontief Input - Output model</a> 
amounts to breaking down an economy into it’s constituent parts so that firms can project demand for their specific sector of the economy.<br />
Say an economy produces goods and services, and those goods and services also consume other goods and 
services (we’ll call this the intermediate demand).  The rest of the goods and services produced go to 
consumers (we’ll call this the final demand).  We can represent this relationship with an equation.  The following model 
is a simplified version of more accurate models used globally. </p>

<script type="math/tex; mode=display">
\hat{x} = C\hat{x} + \hat{d}
</script>

<p>where <script type="math/tex">\hat{x}</script> is a vector containing the total amount of units produced, per sector; <script type="math/tex">C\hat{x}</script> is the intermediate demand (i.e. the demand
the Services industry has for all units produced by all industry’s) and <script type="math/tex">\hat{d}</script> is the final demand (i.e. the consumer). 
Assume there are three parts to a country, say, MadeUpLand’s economy.  In MadeUpLand there is Services, Manufacturing and Agriculture.
Our rates for units consumed per unit of output per industry can be represented by the table below..</p>

<table>
  <tr>
    <td>Purchased From | </td><td>Manufacturing | </td><td>Agriculture | </td><td>Services</td>
  </tr>
  <tr>
    <td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</td>
  </tr>
  <tr>
    <td>Manufacturing</td><td>.45</td><td>.35</td><td>.15</td>
  </tr>
  <tr>
    <td>Agriculture</td><td>.15</td><td>.25</td><td>.05</td>
  </tr>
  <tr>
    <td>Services</td><td>.05</td><td>.05</td><td>.25</td>
  </tr>
</table>

<p>We can remove the headings of this table which will yield us our matrix <script type="math/tex">C</script>..</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

C = \begin{bmatrix}0.45&0.35&0.15\\0.15&0.25&0.05\\0.05&0.05&0.25\end{bmatrix}
 %]]&gt;</script>

<p>Assuming our economists are able to accurately predict the number of units we can expect our consumers <script type="math/tex">d</script> to consume, say..</p>

<script type="math/tex; mode=display">
\hat{d} = \begin{bmatrix}7\\18\\26\end{bmatrix}
</script>

<p>We could then attempt to estimate the number of units our economy must produce, <script type="math/tex">\hat{x}</script>, in each sector to satisfy the demand from
our consumers <script type="math/tex">\hat{d}</script> and the demand of other industries in our economy <script type="math/tex">C</script>.  The following transforms our equation to satisfy this constraint.</p>

<script type="math/tex; mode=display">

(I - C)\cdot\hat{x} = \hat{d}
</script>

<script type="math/tex; mode=display">

\vdots

</script>

<script type="math/tex; mode=display">


\hat{x} = (I - C)^{-1} \cdot \hat{d}

</script>

<p>Substituting our variables with the actual values yields the following result..</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\hat{x} = \left(\begin{bmatrix}1&0&0\\0&1&0\\0&0&1\end{bmatrix} - \begin{bmatrix}0.45&0.35&0.15\\0.15&0.25&0.05\\0.05&0.05&0.25\end{bmatrix}\right)^{-1} . \begin{bmatrix}7\\18\\26\end{bmatrix}

 %]]&gt;</script>

<script type="math/tex; mode=display">

\vdots

</script>

<script type="math/tex; mode=display">

\hat{x} = \begin{bmatrix}46.59\\35.9962\\40.1724\end{bmatrix}

</script>

<h2 id="how-good-is-this-model---working-with-bea-data">How good is this model? - Working with BEA data</h2>

<p>So doing all the matrix operations on the Leontief model is pretty basic stuff.  How do we make this interesting?  Let’s use real data
from the BEA and test that the above mathematical steps are correct.</p>

<p>I grabbed data from the <a href="http://bea.gov/industry/io_annual.htm">BEA input output accounts data</a>.  After about a half hour of examining the data,
I was able to figure out what parts I needed to computer the appropriate values to be used in the model.  First I will go over our data set.</p>

<p>The data set contains total industry output vectors (<script type="math/tex">\hat{x}</script>).  I will reiterate now, the point of this post is to introduce a real world
data set and attempt to prove that the Leontief model is correct, and that the mathematical steps above are reproducible on real world data.
This won’t be a mathematical proof. Considering we are given <script type="math/tex">\hat{x}</script>, we must compute values for <script type="math/tex">\hat{d}</script> and <script type="math/tex">C</script>.  </p>

<p>To compute values for <script type="math/tex">C</script> (this algorithm will be imperative in the next post when we build our extrapolative model) I introduce
a new matrix <script type="math/tex">U</script>.  <script type="math/tex">U</script> contains the units consumed by the sectors of the economy.  <script type="math/tex">C_{i,j}</script> will be computed as </p>

<script type="math/tex; mode=display">
\frac{U_{i,j}}{\hat{x}_{j}}
</script>

<p><script type="math/tex">\hat{d}</script> will be defined as the difference between the total units the economy produced per sector, <script type="math/tex">\hat{x}</script>, and the amount each sector consumed, <script type="math/tex">C \cdot \hat{x}</script>.</p>

<p>The data set contains total industry output vectors by sector for each year from 1997 - 2013.  For this example I will use only the 2013 data to
build a kind of proof of concept that the Leontief model is correct.  The industry output vector will be represented as <script type="math/tex">\hat{x}</script>.<br />
I will introduce a new matrix <script type="math/tex">U</script> which will contain the units consumed by industry (the input to each sector).  I will then utilize
<script type="math/tex">U</script> to compute the consumption rates for which <script type="math/tex">C</script> will contain.</p>

<p>I acquired the data for <script type="math/tex">\hat{x}</script> by just copying the column Total Industry Output from the “Make” excel file into a Python list.
To build <script type="math/tex">U</script> I parsed the file <a href="https://github.com/dhurley14/LeontiefIOModel/blob/master/src/betterData.csv">fixedData.csv</a> which 
is a modified version of the data from the BEA <a href="http://bea.gov/industry/xls/io-annual/IOUse_Before_Redefinitions_PRO_1997-2013_Sector.xlsx">“Use”</a> excel file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="kn">import</span> <span class="nn">csv</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">linalg</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot; Create a script that will wrangle and format our IO data</span>
</span><span class="line"><span class="sd">    and then put it into a scipy matrix, which we can then save</span>
</span><span class="line"><span class="sd">    and use later.</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">save_table</span><span class="p">(</span><span class="n">someFile</span><span class="p">,</span> <span class="n">theDelimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="n">startPoint</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">endPoint</span><span class="o">=</span><span class="mi">17</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; loads data from csv file</span>
</span><span class="line"><span class="sd">    into a numpy matrix and saves</span>
</span><span class="line"><span class="sd">    the matrix data</span>
</span><span class="line">
</span><span class="line"><span class="sd">    someFile csv: a csv file containing our matrix data.</span>
</span><span class="line"><span class="sd">    theDelimiter char: character to split columns of data, set to &#39;,&#39;.</span>
</span><span class="line"><span class="sd">    </span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">481026</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">580284</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">496708</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1206919</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">5787100</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1458137</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1392835</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1024517</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1223897</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">5133698</span><span class="p">,</span>
</span><span class="line">        <span class="mf">1.0</span><span class="o">/</span><span class="mi">3691586</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">2564883</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">1218544</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">740624</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">2706124</span><span class="p">]</span>
</span><span class="line">    <span class="n">afile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">someFile</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">data</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">afile</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="n">theDelimiter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;betterData.csv&#39;</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
</span><span class="line">        <span class="n">target</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="n">startPoint</span><span class="p">:</span><span class="n">endPoint</span><span class="p">]</span>
</span><span class="line">            <span class="n">target</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">startPoint</span><span class="p">:</span><span class="n">endPoint</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">genfromtxt</span><span class="p">(</span><span class="s">&#39;betterData.csv&#39;</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">delimiter</span><span class="o">=</span><span class="n">theDelimiter</span><span class="p">,</span><span class="n">skip_header</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="c">#for row in data:</span>
</span><span class="line">    <span class="c">#    print row[2:]</span>
</span><span class="line">    <span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">row</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
</span><span class="line">    <span class="k">print</span> <span class="n">U</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>outputs this..</p>

<p><code>[array([ 94325,    160,      0,   1939, 275162,   1584,   3193,     92,
            1,     49,   2030,   1094,   7517,     81,   2663]), 
            array([  2473,  54705,  33987,  10292, 568596,     50,     57,   2015,
          301,   4060,   1341,    457,   1163,    454,  18612]), 
          array([ 4168,  3563,  2191,  2192, 55702,  4641, 10797,  5912,  4326,
       68779,  9216, 25255, 10772,  3593, 29092]), ...</code></p>

<p>Now that we have our U, we can compute C and d.  Notice I set the variable <code>x</code> above to be 1.0/val instead of the actual
output values because in Python multiplication is 25% faster than <a href="http://stackoverflow.com/a/226563">division</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="n">new</span><span class="o">-</span><span class="n">host</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="o">~</span> <span class="n">devin</span><span class="err">$</span> <span class="n">time</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;for i in xrange(int(1e8)): t=12341234234.234 / 2.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">real</span>	<span class="mi">0</span><span class="n">m12</span><span class="o">.</span><span class="mi">162</span><span class="n">s</span>
</span><span class="line"><span class="n">user</span>	<span class="mi">0</span><span class="n">m12</span><span class="o">.</span><span class="mi">131</span><span class="n">s</span>
</span><span class="line"><span class="n">sys</span>	<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">01</span><span class="mi">8</span><span class="n">s</span>
</span><span class="line"><span class="n">new</span><span class="o">-</span><span class="n">host</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="o">~</span> <span class="n">devin</span><span class="err">$</span> <span class="n">time</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;for i in xrange(int(1e8)): t=12341234234.234 * 0.5&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">real</span>	<span class="mi">0</span><span class="n">m9</span><span class="o">.</span><span class="mi">270</span><span class="n">s</span>
</span><span class="line"><span class="n">user</span>	<span class="mi">0</span><span class="n">m9</span><span class="o">.</span><span class="mi">244</span><span class="n">s</span>
</span><span class="line"><span class="n">sys</span>	<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">015</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the python code that computes <script type="math/tex">C</script>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="c"># table2 will contain the rates</span>
</span><span class="line">    <span class="c"># at which each sector consumes.</span>
</span><span class="line">    <span class="n">table2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">U</span><span class="p">:</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="n">row2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
</span><span class="line">            <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">row2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">fabs</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">item</span><span class="p">)))</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="c">#print row2</span>
</span><span class="line">        <span class="k">print</span> <span class="n">row2</span>
</span><span class="line">        <span class="n">table2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">row2</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n\n</span><span class="s">table2 after loop&quot;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table2</span>
</span><span class="line">
</span><span class="line">    <span class="c"># transform table2 into a useable format</span>
</span><span class="line">    <span class="c"># this will be C</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">table2</span><span class="p">)</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span><span class="line">    <span class="n">np</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;myMatrix&#39;</span><span class="p">,</span><span class="n">C</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">C</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we will compute <script type="math/tex">\hat{d}</script></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">print</span> <span class="s">&quot;printing vec now..&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># put x back into it&#39;s original form, not 1.0/val</span>
</span><span class="line">    <span class="n">vecx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">([[</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="n">item</span><span class="p">)]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span>
</span><span class="line">    <span class="k">print</span> <span class="n">vecx</span>
</span><span class="line">    <span class="n">B</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vecx</span><span class="p">)</span>
</span><span class="line">    <span class="c">#B = np.load(&#39;myMatrix.npy&#39;)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">B:&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">B</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s"> our vector d&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">vecd</span> <span class="o">=</span> <span class="n">vecx</span> <span class="o">-</span> <span class="n">B</span>
</span><span class="line">    <span class="k">print</span> <span class="n">vecd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And finally our equation <script type="math/tex">\hat{x} = (I - C)^{-1} \cdot \hat{d}</script></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">print</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Now we will compute our function to find vecx&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;computing x=(I-C)^-1 . d&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># create identity matrix by computing A dot inverse(A)</span>
</span><span class="line"><span class="n">I</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">I</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">prod</span> <span class="o">=</span> <span class="p">(</span><span class="n">I</span> <span class="o">-</span> <span class="n">A</span><span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">prod</span><span class="o">.</span><span class="n">I</span>
</span><span class="line"><span class="k">print</span> <span class="n">result</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vecd</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;The above should be equal to vecx&quot;</span>
</span><span class="line"><span class="k">print</span> <span class="n">vecx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The resulting <script type="math/tex">\hat{x}</script> = <code>[[  481026.00000002]
 [  580284.00000003]
 [  496708.00000001]
 [ 1206919.00000001]
 [ 5787100.00000011]
 [ 1458137.00000003]
 [ 1392835.00000001]
 [ 1024517.00000002]
 [ 1223897.00000001]
 [ 5133698.00000016]
 [ 3691586.0000002 ]
 [ 2564883.        ]
 [ 1218544.00000002]
 [  740624.00000001]
 [ 2706124.00000001]]</code></p>

<p>which, disregarding rounding numerical approximation errors, is exactly our precomputed total industrial output vector
 <code>[[  481026.]
 [  580284.]
 [  496708.]
 [ 1206919.]
 [ 5787100.]
 [ 1458137.]
 [ 1392835.]
 [ 1024517.]
 [ 1223897.]
 [ 5133698.]
 [ 3691586.]
 [ 2564883.]
 [ 1218544.]
 [  740624.]
 [ 2706124.]]</code></p>

<p>Next time we will use this algorithm of computing <script type="math/tex">C</script> and <script type="math/tex">\hat{d}</script> over all of our historical data,
 perform some statistical analysis on this and then try to extrapolate values for <script type="math/tex">\hat{x}</script>.  Source code is available on
 my <a href="https://github.com/dhurley14/LeontiefIOModel">GitHub</a>.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topic Analysis and Marc Andreessen's Tweets]]></title>
    <link href="http://dhurley14.github.io/blog/2015/01/11/marc-andreessen-lda/"/>
    <updated>2015-01-11T22:43:07-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/01/11/marc-andreessen-lda</id>
    <content type="html"><![CDATA[<h2 id="background-motivation">Background Motivation</h2>
<p>I began this experiment with topic analysis on a friend’s suggestion on utilizing the treasure trove that is twitter.
Marc Andreessen retweets a ton of different people all the time.  It’s impossible to keep up with what those people’s interests are,
and more specifically what pmarca’s interests are.  I wanted to learn what exactly are the “Top Ten Things” that Marc Andreessen retweets, and how does he feel about these topics?
<!-- more --></p>

<p>As we all know, a retweet basically widdles down to agreeing with the tweet’s author.  This is where I decided to begin
researching topic analysis with Latent Dirichlet Allocation.</p>

<p>The first part of this blog series will cover a review of how I acquired the twitter data and the steps I took to get the the top
ten topics pmarca retweets. This blog owes a special thanks to the tutorial blog from <a href="http://blog.mathandpencil.com/using-latent-dirichlet-allocation-to-categorize-my-twitter-feed/">mathandpencil</a>.  The second part of this blog series will cover sentiment analysis on the tweets that are associated
with each topic.  Thus giving us an overview of how Marc Andreessen feels about specific topics he tweets about, based on people he 
retweets.</p>

<h3 id="acquiring-pmarcas-tweets">Acquiring pmarca’s Tweets</h3>

<p>I utilized the <a href="https://pypi.python.org/pypi/twython/">twython</a> library to acquire the tweets.  Unfortunately, Twitter’s api limits you to the 3200 most recent tweets so a quick introduction to the API might be useful to some.  The file containing all of this logic is the aptly named (I think at least) get_tweets.py.</p>

<p>I first needed access to the Twitter API.  Twython makes this extrememly easy and all I need to do is add my <code>APP_KEY</code> and <code>APP_SECRET</code> for authorization.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="kn">from</span> <span class="nn">twython</span> <span class="kn">import</span> <span class="n">Twython</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_authentication</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Get a connection to the Twitter API using Twython.</span>
</span><span class="line"><span class="sd">    return a new instance of the Twython object.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">APP_KEY</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
</span><span class="line">    <span class="n">APP_SECRET</span> <span class="o">=</span> <span class="s">&#39;xxxxx&#39;</span>
</span><span class="line">    <span class="n">twitter</span> <span class="o">=</span> <span class="n">Twython</span><span class="p">(</span><span class="n">APP_KEY</span><span class="p">,</span> <span class="n">APP_SECRET</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">twitter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The next step was to get the user’s tweets.  The <code>**kwargs</code> were necessary so that I could loop through the Twitter API and acquire all 3200 of pmarca’s most recent tweets (again Twitter doesn’t allow you to access all of a user’s tweets).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#39;pmarca&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Get a user&#39;s timeline</span>
</span><span class="line"><span class="sd">    :param username: (default pmarca)</span>
</span><span class="line"><span class="sd">    :param tweetID: </span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">twitter</span> <span class="o">=</span> <span class="n">get_authentication</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c"># to get all 3200 possible tweets, I must cycle</span>
</span><span class="line">    <span class="c"># through, and change the max_id on each call to be the lowest</span>
</span><span class="line">    <span class="c"># id , so that my next call gets all the tweets below that id,</span>
</span><span class="line">    <span class="c"># and so on and so forth.</span>
</span><span class="line">    <span class="n">user_timeline</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">twitter</span><span class="o">.</span><span class="n">get_user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">twitter</span><span class="o">.</span><span class="n">get_user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">max_id</span><span class="o">=</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;anId&#39;</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">user_timeline</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now that I have my authentication and a way to get the user’s timeline (note that <code>count=200</code> is the max amount of tweets from a user’s timeline you can receive before having to paginate, which is what I will show next), I will build a python dict that will store the tweets and the hyperlinks that the tweet links to.  This will help me perform sentiment analysis on the topics using the tweets as my sentiment indicators.</p>

<p>To get the next oldest 200 tweets, and so on and so forth until I max out at 3200, I had to loop through get_tweets(), setting the <code>tweetID</code> parameter to the ID of the last tweet that I received in the previous API call.  I do this 16 times in total (hence, 3200 tweets).  I then write all of the tweets to a file called <code>pmarca_rts_append.txt</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">def</span> <span class="nf">output_all_rts</span><span class="p">():</span>
</span><span class="line">    <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">get_tweets</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c"># the below will build the first entry in our dict.  The dict will map tweet&#39;s and their corresponding URL&#39;s that were found in the tweets.</span>
</span><span class="line">    <span class="n">urls</span> <span class="o">=</span> <span class="p">{</span><span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;expanded_url&#39;</span><span class="p">]:</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">))</span> <span class="k">if</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">]</span> <span class="ow">and</span> <span class="s">&quot;RT&quot;</span> <span class="ow">in</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#39;pmarca&#39;</span><span class="p">,</span><span class="n">anId</span><span class="o">=</span><span class="n">user_timeline</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span><span class="line">        <span class="c"># Now I update that dict again to map more tweet&#39;s and URL&#39;s together</span>
</span><span class="line">        <span class="c"># this will help when I have to perform sentiment analysis on each topic.</span>
</span><span class="line">        <span class="n">urls</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;expanded_url&#39;</span><span class="p">]:</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">))</span>
</span><span class="line">            <span class="k">if</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">]</span> <span class="ow">and</span> <span class="s">&quot;RT&quot;</span> <span class="ow">in</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]})</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">output_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;pmarca_rts_links_dict.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w+b&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">output_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">urls</span><span class="p">))</span>
</span><span class="line">    <span class="n">output_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">output_all_rts</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now I have all of pmarca’s retweets (which turns out to be 1/2 of all of his tweets returned by the API).
Next up will be to extract the text from the associated links.  </p>

<p>In order to build my LDA model I needed to find a way to extract the body of the text from each article for which I had links to.  On the <a href="http://blog.mathandpencil.com/using-latent-dirichlet-allocation-to-categorize-my-twitter-feed/">mathandpencil</a> blog, Joseph Misiti uses Diffbot to acquire the text body.  Unfortunately my Diffbot account is no longer active so I used the extremely handy <a href="https://github.com/misja/python-boilerpipe">python-boilerpipe wrapper</a> library to handle this for me.</p>

<p>First, I needed to strip out the URL’s from the dictionary I built when I extracted the links from the tweets.  At this point, I figured it would be better to just
map the tweets to the article body itself.  So I wrote a script to do that.  </p>

<p>By passing in the dict I had saved previously <code>pmarca_rts_links_dict.txt</code> I was able to extract the text from the hyperlinks and map the body article text to the 
tweets (I used <code>|||</code> as the chars to separate the tweet and the article body text).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="kn">from</span> <span class="nn">boilerpipe.extract</span> <span class="kn">import</span> <span class="n">Extractor</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">ast</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot; Read a dict file mapping, get the urls, </span>
</span><span class="line">
</span><span class="line"><span class="sd">extract the text, send a mapping of the text </span>
</span><span class="line"><span class="sd">and the associated url, close the file</span>
</span><span class="line"><span class="sd">01/19/2015</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">buildMapping</span><span class="p">(</span><span class="n">someDictFile</span><span class="p">):</span>
</span><span class="line"><span class="n">somedata</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">someDictFile</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">somedata</span><span class="p">)</span>
</span><span class="line"><span class="n">keySize</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span><span class="line"><span class="n">successRatio</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="n">linksLeft</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="n">target</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;content_link_mapping.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class="line">
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">extractor</span> <span class="o">=</span> <span class="n">Extractor</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="s">&#39;ArticleSentencesExtractor&#39;</span><span class="p">,</span><span class="n">url</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;got the extractor&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="c">#target.write(str(result[key])+&quot;|||&quot;+extractor.getText().encode(&#39;utf-8&#39;)+&#39;\n\n\n&#39;)</span>
</span><span class="line">        <span class="n">target</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; ||| &quot;</span><span class="o">+</span><span class="n">extractor</span><span class="o">.</span><span class="n">getText</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span> <span class="c">#</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;wrote data&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">successRatio</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">linksLeft</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;[+] SUCCESS    &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">keySize</span> <span class="o">-</span> <span class="n">linksLeft</span><span class="p">))</span>
</span><span class="line">    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">        <span class="n">linksLeft</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;[-] FAILURE - &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="o">+</span> <span class="s">&quot; --- &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">keySize</span> <span class="o">-</span> <span class="n">linksLeft</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">target</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Success Ratio : &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">successRatio</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">keySize</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line"><span class="n">buildMapping</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The boilerpipe python wrapper ended up extracting text from a little over 78% of the hyperlinks I passed through to it.  I have no idea if this is because
the hyperlinks I sent it were 78% articles and the rest video’s or pictures but I’m fairly happy with that.  I ended up with around 600 articles of text I could use
to extract data from.</p>

<p>Next we clean up the corpus and the result can be found <a href="https://raw.githubusercontent.com/dhurley14/pmarcaRTS/master/src/actual/newcorpus.txt">here</a> (The file is 
3.5 MB of just text FYI).
We now have a corpus we can use to build our LDA model.  </p>

<h3 id="lda-model-results">LDA model results</h3>
<p>I used the <a href="http://radimrehurek.com/gensim/index.html">gensim</a> package which has an implementation of the LDA algorithm and a very nice tutorial on how to utilize it.  After building the model I got the top ten (and <a href="https://github.com/dhurley14/pmarcaRTS/blob/master/src/actual/tmp/16topics.txt">16</a> after reading <a href="http://a16z.com/2015/01/22/16-things/">this</a>) topics Marc Andreessen retweets the most.  After looking at the top words for each topic (<a href="https://github.com/dhurley14/pmarcaRTS/blob/master/src/actual/tmp/10topics.txt">which can be viewed here</a>), I came up with the following list of topics (in no particular order):</p>

<h4 id="world-issues-economic--political">1. World Issues (economic &amp; political)</h4>

<h4 id="american-military-editorialized-sorry-">2. American Military (editorialized, sorry :(</h4>

<h4 id="healthcare">3. Healthcare</h4>

<h4 id="venture-capital">4. Venture Capital</h4>

<h4 id="bitcoin-blockchain">5. Bitcoin Blockchain</h4>

<h4 id="section">6. ???</h4>

<h4 id="european-economic-policy">7. European Economic Policy</h4>

<h4 id="psychology">8. Psychology</h4>

<h4 id="oil-crisis">9. Oil Crisis</h4>

<h4 id="gay-rights">10. Gay rights</h4>

<p>To generate a more comprehensive set of topics, it certainly would’ve been nice to have acquired more than approximately 700 articles.  I also do not fully understand how the LDA algorithm works so I’m sure by playing around with parameters in the LDA model I could more closely approximate the topics. I also believe that some of these topics seem far fetched because pmarca was probably only tweeting about a couple of these topics at the time. In addition to this, my sample size was limited to the most recent 3200 tweets, so whatever topics are there are the most commonly seen topics from pmarca’s last 3200 tweets. Soon will be part 2 of this post, where I examine the sentiment of the tweets associated with these topics.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://dhurley14.github.io/blog/2015/01/07/hello/"/>
    <updated>2015-01-07T22:11:51-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/01/07/hello</id>
    <content type="html"><![CDATA[<p>Hello world!</p>

<p>The title for this blog is supposed to be a play on words of AdventureLand (i.e. AdventureLDA or AdventureLand).  Just a place to have fun ;)
In this blog I will be examining a ton of different applications of machine learning algorithms. 
Hopefully the results of these blog posts are interesting to people.  Here’s to an adventure in machine learning!</p>
]]></content>
  </entry>
  
</feed>
