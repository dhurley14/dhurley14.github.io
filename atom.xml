<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My ML Adventures]]></title>
  <link href="http://dhurley14.github.io/atom.xml" rel="self"/>
  <link href="http://dhurley14.github.io/"/>
  <updated>2015-07-25T12:58:55-04:00</updated>
  <id>http://dhurley14.github.io/</id>
  <author>
    <name><![CDATA[Devin Hurley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Bidding Up Tech Shares]]></title>
    <link href="http://dhurley14.github.io/blog/2015/07/25/on-bidding-up-tech-shares/"/>
    <updated>2015-07-25T11:54:42-04:00</updated>
    <id>http://dhurley14.github.io/blog/2015/07/25/on-bidding-up-tech-shares</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<ol>
  <li>Googles’ shares rose 16% on Friday (2015-07-17) after the company said revenue was up 11% from a year earlier.</li>
  <li>Netflix rose 18% on Thursday (2015-07-16) after 2nd quarter revenue rose 22%</li>
  <li>Amazon announced it’s revenue on Thursday (2015-07-23) had risen 20%, resulting in a record high price on Friday of $580.57.</li>
  <li>Facebook is expected to announce its earnings on the 29th of July.</li>
  <li>The Nasdaq is up 10% this year, reaching a new record on Friday (2015-07-17).</li>
</ol>

<p>Looks pretty good for the technology sector.  The rest of the sectors ain’t doing so hot though..
<!--more--></p>

<h2 id="whats-a-poor-boy-to-do">What’s a poor boy to do?</h2>
<p>The Nasdaq’s rise is a result of the percentage of tech stocks that make up the index.  Compare this to the S&amp;P500, which rose
3.3% this year and still remains below highs reached in May.  Given approximately 50% of the composition of the Nasdaq index is made up of tech companies
while the S&amp;P 500 is made up of ~20% tech stocks, there is evidence of an impending tech bubble for these public stocks.  But is it really a bubble?</p>

<p>The evidence to look for lies in the lack of high-achieving performance in the wider economy.  Sales and earnings in many sectors of 
the economy are flat or falling, making investment in tech stocks mroe appealing than they previously (&lt; 2000 A.D.) were.</p>

<p>Many portfolio managers say they are willing to pay such high prices for these tech stocks because their (the managers’) expectations of growth
for the tech companies outweighs the up-front costs to owning these shares.  Growth is becoming more scarce in the global economy.
Quarterly revenue at S&amp;P500 companies is estimated to have dropped 4% from a year ago in the 2nd quarter (via FactSet).</p>

<p>For example, Google shares have been trading at 24.9x last 12 months earnings;  Netflix is trading at 257.8x 12 months’ earnings and Facebook
is trading at 52.5x.</p>

<p>The wide availability of V.C. funding for smaller, faster-growing companies allows these companies to stay private for far longer.  Forcing
public investors to push more money into already public stocks, because they have no other outlet for the money they wish to invest in technology.
Thus raising the public tech shares even higher.</p>

<h2 id="so-whats-the-solution">So what’s the solution?</h2>
<p>There is currently no way for the general public to offer investments in to these private, smaller, faster-growing companies.  By the time these companies
do go public, the opportunity for huge growth has already passed by, and the general public misses out.  No true solution exists.  The best way to be 
sure to not lose money is not to bet, but that’s like saying the best way to not die in a car accident is not go outside.  I can’t offer a solution but
evidence and analysis of a problem could potentially help some others discover a better strategy than the continual bidding up of the same Big Co Tech Stocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting iPhone SMS Backups]]></title>
    <link href="http://dhurley14.github.io/blog/2015/02/09/extracting-iphone-sms-backups/"/>
    <updated>2015-02-09T13:09:40-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/02/09/extracting-iphone-sms-backups</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>A few weeks ago my girlfriend had the idea of going back and seeing our first text messages to each other.
Obviously we send each other quite a few messages a day, so just scrolling all the way back in time on the iPhone
was out of the question.  I still thought this was a really neat idea and remembered during the winter of 2013 I had bought <a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579/">“Violent Python”</a> by TJ O’Connor.<br />
In this book, Mr. O’Connor presents code to delve into the iPhone’s SMS backups that are stored on the computer.<br />
I did this exercise back in 2013 and forgot about the code up until now.  This post will detail the issues I ran into 
while trying to extract the data.</p>

<!--more-->

<h2 id="running-violent-python-code">Running Violent Python code</h2>

<p>By running the violent python code for <a href="https://github.com/shadow-box/Violent-Python-Examples/blob/master/Chapter-3/7-iphoneMessages.py">extracting sms messages</a> I was able to see the database tables but not access them.
I was getting an error message when I tried to open the tables up using the sqlite terminal application.  The error
that kept coming through was </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="Bash"><span class="line">devin<span class="nv">$ </span>sqlite3 3d0d7e5fb2ce288813306e4d4636395e047a3d28
</span><span class="line">SQLite version 3.6.12
</span><span class="line">Enter <span class="s2">&quot;.help&quot;</span> <span class="k">for</span> instructions
</span><span class="line">Enter SQL statements terminated with a <span class="s2">&quot;;&quot;</span>
</span><span class="line">sqlite&gt; .table
</span><span class="line">Error: file is encrypted or is not a database
</span><span class="line">sqlite&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After quite a bit of googling around trying to figure out how to decrypt the sms database, I found out that the reason 
I was getting this error was due to the fact that I was running an older version of sqlite3, and that the database wasn’t
actually encrypted.  I couldn’t quite find any reliable ways of upgrading sqlite3 so I just upgraded my Python installation 
to 2.7.9 (I was previously running 2.7.3, oops :).</p>

<p>This successfully displayed the ‘message’ database that the iPhone uses to store historical texts.  To extract them I ran this
<a href="https://github.com/toffer/iphone-sms-backup/blob/master/sms-backup.py">script</a> which is more robust than the example script presented
in Violent Python.  After doing so I was left with all of my messages from my girlfriend (after passing in the appropriate parameters 
when I ran the script in the terminal, see usage <a href="https://github.com/toffer/iphone-sms-backup/blob/master/README.md">here</a>)  </p>

<h2 id="conclusions">Conclusions</h2>
<p>Unfortunately my very first texts to my girlfriend were not in the database.  I am not fully sure at what point the iPhone begins
to remove the oldest messages from its ‘message’ database but I would be surprised that our conversation history had reached a point
where the iPhone decided it needed to remove that first month of conversations.</p>

<p>I wrote this post to help people out as it seemed there were many people running into this issue ‘db encryption’ issue while
trying to extract sms data from the iPhone’s backup database.  Hopefully this helps out for this wishing to do the same
in the future!  I will continue to try to uncover why some of my backup messages are missing.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Leontief IO Model]]></title>
    <link href="http://dhurley14.github.io/blog/2015/02/08/leontif-input-output-model/"/>
    <updated>2015-02-08T22:03:52-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/02/08/leontif-input-output-model</id>
    <content type="html"><![CDATA[<h2 id="background-motivation">Background Motivation</h2>
<p>Oil prices have been falling dramatically.  Oil prices are now at 40% of what they started FY 2014 off.
The fall in oil prices has been a result of increasing shale oil production in the United States and 
softening global demand.  Falling oil prices are part of a global phenomenon of deflation.<br />
The United States is far off the Federal Reserve’s goal of 2% inflation (currently up 0.7% in December 2014 from a year earlier).
Being able to predict demand is imperative to all sectors of an economy.  In this post I will introduce the
Leontief IO model and examine just how accurate it can be at predicting demand using historical data from the <a href="http://bea.gov/industry/io_annual.htm">BEA</a></p>

<p>This post will contain an introduction to the components of the model.  I will present a basic example using fictional data.
I will then present a model utilizing real world data.  In a future post I will build a new model that can be used to predict values of 
sector production <script type="math/tex">\hat{x}</script> using statistics and the Fourier transform.</p>

<!--more-->

<h2 id="enter-the-leontief-input---output-model">Enter the Leontief Input - Output Model</h2>
<p><a href="https://en.wikipedia.org/wiki/Input%E2%80%93output_model#Basic_derivation">The Leontief Input - Output model</a> 
amounts to breaking down an economy into it’s constituent parts so that firms can project demand for their specific sector of the economy.<br />
Say an economy produces goods and services, and those goods and services also consume other goods and 
services (we’ll call this the intermediate demand).  The rest of the goods and services produced go to 
consumers (we’ll call this the final demand).  We can represent this relationship with an equation.  The following model 
is a simplified version of more accurate models used globally. </p>

<script type="math/tex; mode=display">
\hat{x} = C\hat{x} + \hat{d}
</script>

<p>where <script type="math/tex">\hat{x}</script> is a vector containing the total amount of units produced, per sector; <script type="math/tex">C\hat{x}</script> is the intermediate demand (i.e. the demand
the Services industry has for all units produced by all industry’s) and <script type="math/tex">\hat{d}</script> is the final demand (i.e. the consumer). 
Assume there are three parts to a country, say, MadeUpLand’s economy.  In MadeUpLand there is Services, Manufacturing and Agriculture.
Our rates for units consumed per unit of output per industry can be represented by the table below..</p>

<table>
  <tr>
    <td>Purchased From | </td><td>Manufacturing | </td><td>Agriculture | </td><td>Services</td>
  </tr>
  <tr>
    <td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; | </td><td>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</td>
  </tr>
  <tr>
    <td>Manufacturing</td><td>.45</td><td>.35</td><td>.15</td>
  </tr>
  <tr>
    <td>Agriculture</td><td>.15</td><td>.25</td><td>.05</td>
  </tr>
  <tr>
    <td>Services</td><td>.05</td><td>.05</td><td>.25</td>
  </tr>
</table>

<p>We can remove the headings of this table which will yield us our matrix <script type="math/tex">C</script>..</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

C = \begin{bmatrix}0.45&0.35&0.15\\0.15&0.25&0.05\\0.05&0.05&0.25\end{bmatrix}
 %]]&gt;</script>

<p>Assuming our economists are able to accurately predict the number of units we can expect our consumers <script type="math/tex">d</script> to consume, say..</p>

<script type="math/tex; mode=display">
\hat{d} = \begin{bmatrix}7\\18\\26\end{bmatrix}
</script>

<p>We could then attempt to estimate the number of units our economy must produce, <script type="math/tex">\hat{x}</script>, in each sector to satisfy the demand from
our consumers <script type="math/tex">\hat{d}</script> and the demand of other industries in our economy <script type="math/tex">C</script>.  The following transforms our equation to satisfy this constraint.</p>

<script type="math/tex; mode=display">

(I - C)\cdot\hat{x} = \hat{d}
</script>

<script type="math/tex; mode=display">

\vdots

</script>

<script type="math/tex; mode=display">


\hat{x} = (I - C)^{-1} \cdot \hat{d}

</script>

<p>Substituting our variables with the actual values yields the following result..</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\hat{x} = \left(\begin{bmatrix}1&0&0\\0&1&0\\0&0&1\end{bmatrix} - \begin{bmatrix}0.45&0.35&0.15\\0.15&0.25&0.05\\0.05&0.05&0.25\end{bmatrix}\right)^{-1} . \begin{bmatrix}7\\18\\26\end{bmatrix}

 %]]&gt;</script>

<script type="math/tex; mode=display">

\vdots

</script>

<script type="math/tex; mode=display">

\hat{x} = \begin{bmatrix}46.59\\35.9962\\40.1724\end{bmatrix}

</script>

<h2 id="how-good-is-this-model---working-with-bea-data">How good is this model? - Working with BEA data</h2>

<p>So doing all the matrix operations on the Leontief model is pretty basic stuff.  How do we make this interesting?  Let’s use real data
from the BEA and test that the above mathematical steps are correct.</p>

<p>I grabbed data from the <a href="http://bea.gov/industry/io_annual.htm">BEA input output accounts data</a>.  After about a half hour of examining the data,
I was able to figure out what parts I needed to computer the appropriate values to be used in the model.  First I will go over our data set.</p>

<p>The data set contains total industry output vectors (<script type="math/tex">\hat{x}</script>).  I will reiterate now, the point of this post is to introduce a real world
data set and attempt to prove that the Leontief model is correct, and that the mathematical steps above are reproducible on real world data.
This won’t be a mathematical proof. Considering we are given <script type="math/tex">\hat{x}</script>, we must compute values for <script type="math/tex">\hat{d}</script> and <script type="math/tex">C</script>.  </p>

<p>To compute values for <script type="math/tex">C</script> (this algorithm will be imperative in the next post when we build our extrapolative model) I introduce
a new matrix <script type="math/tex">U</script>.  <script type="math/tex">U</script> contains the units consumed by the sectors of the economy.  <script type="math/tex">C_{i,j}</script> will be computed as </p>

<script type="math/tex; mode=display">
\frac{U_{i,j}}{\hat{x}_{j}}
</script>

<p><script type="math/tex">\hat{d}</script> will be defined as the difference between the total units the economy produced per sector, <script type="math/tex">\hat{x}</script>, and the amount each sector consumed, <script type="math/tex">C \cdot \hat{x}</script>.</p>

<p>The data set contains total industry output vectors by sector for each year from 1997 - 2013.  For this example I will use only the 2013 data to
build a kind of proof of concept that the Leontief model is correct.  The industry output vector will be represented as <script type="math/tex">\hat{x}</script>.<br />
I will introduce a new matrix <script type="math/tex">U</script> which will contain the units consumed by industry (the input to each sector).  I will then utilize
<script type="math/tex">U</script> to compute the consumption rates for which <script type="math/tex">C</script> will contain.</p>

<p>I acquired the data for <script type="math/tex">\hat{x}</script> by just copying the column Total Industry Output from the “Make” excel file into a Python list.
To build <script type="math/tex">U</script> I parsed the file <a href="https://github.com/dhurley14/LeontiefIOModel/blob/master/src/betterData.csv">fixedData.csv</a> which 
is a modified version of the data from the BEA <a href="http://bea.gov/industry/xls/io-annual/IOUse_Before_Redefinitions_PRO_1997-2013_Sector.xlsx">“Use”</a> excel file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="kn">import</span> <span class="nn">csv</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">linalg</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot; Create a script that will wrangle and format our IO data</span>
</span><span class="line"><span class="sd">    and then put it into a scipy matrix, which we can then save</span>
</span><span class="line"><span class="sd">    and use later.</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">save_table</span><span class="p">(</span><span class="n">someFile</span><span class="p">,</span> <span class="n">theDelimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="n">startPoint</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">endPoint</span><span class="o">=</span><span class="mi">17</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; loads data from csv file</span>
</span><span class="line"><span class="sd">    into a numpy matrix and saves</span>
</span><span class="line"><span class="sd">    the matrix data</span>
</span><span class="line">
</span><span class="line"><span class="sd">    someFile csv: a csv file containing our matrix data.</span>
</span><span class="line"><span class="sd">    theDelimiter char: character to split columns of data, set to &#39;,&#39;.</span>
</span><span class="line"><span class="sd">    </span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">481026</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">580284</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">496708</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1206919</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">5787100</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1458137</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1392835</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1024517</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1223897</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">5133698</span><span class="p">,</span>
</span><span class="line">        <span class="mf">1.0</span><span class="o">/</span><span class="mi">3691586</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">2564883</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">1218544</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">740624</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">2706124</span><span class="p">]</span>
</span><span class="line">    <span class="n">afile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">someFile</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">data</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">afile</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="n">theDelimiter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;betterData.csv&#39;</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
</span><span class="line">        <span class="n">target</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="n">startPoint</span><span class="p">:</span><span class="n">endPoint</span><span class="p">]</span>
</span><span class="line">            <span class="n">target</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">startPoint</span><span class="p">:</span><span class="n">endPoint</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">genfromtxt</span><span class="p">(</span><span class="s">&#39;betterData.csv&#39;</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">delimiter</span><span class="o">=</span><span class="n">theDelimiter</span><span class="p">,</span><span class="n">skip_header</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="c">#for row in data:</span>
</span><span class="line">    <span class="c">#    print row[2:]</span>
</span><span class="line">    <span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">row</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
</span><span class="line">    <span class="k">print</span> <span class="n">U</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>outputs this..</p>

<p><code>[array([ 94325,    160,      0,   1939, 275162,   1584,   3193,     92,
            1,     49,   2030,   1094,   7517,     81,   2663]), 
            array([  2473,  54705,  33987,  10292, 568596,     50,     57,   2015,
          301,   4060,   1341,    457,   1163,    454,  18612]), 
          array([ 4168,  3563,  2191,  2192, 55702,  4641, 10797,  5912,  4326,
       68779,  9216, 25255, 10772,  3593, 29092]), ...</code></p>

<p>Now that we have our U, we can compute C and d.  Notice I set the variable <code>x</code> above to be 1.0/val instead of the actual
output values because in Python multiplication is 25% faster than <a href="http://stackoverflow.com/a/226563">division</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="n">new</span><span class="o">-</span><span class="n">host</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="o">~</span> <span class="n">devin</span><span class="err">$</span> <span class="n">time</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;for i in xrange(int(1e8)): t=12341234234.234 / 2.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">real</span>	<span class="mi">0</span><span class="n">m12</span><span class="o">.</span><span class="mi">162</span><span class="n">s</span>
</span><span class="line"><span class="n">user</span>	<span class="mi">0</span><span class="n">m12</span><span class="o">.</span><span class="mi">131</span><span class="n">s</span>
</span><span class="line"><span class="n">sys</span>	<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">01</span><span class="mi">8</span><span class="n">s</span>
</span><span class="line"><span class="n">new</span><span class="o">-</span><span class="n">host</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="o">~</span> <span class="n">devin</span><span class="err">$</span> <span class="n">time</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;for i in xrange(int(1e8)): t=12341234234.234 * 0.5&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">real</span>	<span class="mi">0</span><span class="n">m9</span><span class="o">.</span><span class="mi">270</span><span class="n">s</span>
</span><span class="line"><span class="n">user</span>	<span class="mi">0</span><span class="n">m9</span><span class="o">.</span><span class="mi">244</span><span class="n">s</span>
</span><span class="line"><span class="n">sys</span>	<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">015</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the python code that computes <script type="math/tex">C</script>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="c"># table2 will contain the rates</span>
</span><span class="line">    <span class="c"># at which each sector consumes.</span>
</span><span class="line">    <span class="n">table2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">U</span><span class="p">:</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="n">row2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
</span><span class="line">            <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">row2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">fabs</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">item</span><span class="p">)))</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="c">#print row2</span>
</span><span class="line">        <span class="k">print</span> <span class="n">row2</span>
</span><span class="line">        <span class="n">table2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">row2</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n\n</span><span class="s">table2 after loop&quot;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table2</span>
</span><span class="line">
</span><span class="line">    <span class="c"># transform table2 into a useable format</span>
</span><span class="line">    <span class="c"># this will be C</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">table2</span><span class="p">)</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span><span class="line">    <span class="n">np</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;myMatrix&#39;</span><span class="p">,</span><span class="n">C</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">C</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we will compute <script type="math/tex">\hat{d}</script></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">print</span> <span class="s">&quot;printing vec now..&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># put x back into it&#39;s original form, not 1.0/val</span>
</span><span class="line">    <span class="n">vecx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">([[</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="n">item</span><span class="p">)]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span>
</span><span class="line">    <span class="k">print</span> <span class="n">vecx</span>
</span><span class="line">    <span class="n">B</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vecx</span><span class="p">)</span>
</span><span class="line">    <span class="c">#B = np.load(&#39;myMatrix.npy&#39;)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">B:&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">B</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s"> our vector d&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">vecd</span> <span class="o">=</span> <span class="n">vecx</span> <span class="o">-</span> <span class="n">B</span>
</span><span class="line">    <span class="k">print</span> <span class="n">vecd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And finally our equation <script type="math/tex">\hat{x} = (I - C)^{-1} \cdot \hat{d}</script></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">print</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Now we will compute our function to find vecx&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;computing x=(I-C)^-1 . d&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># create identity matrix by computing A dot inverse(A)</span>
</span><span class="line"><span class="n">I</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">I</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">prod</span> <span class="o">=</span> <span class="p">(</span><span class="n">I</span> <span class="o">-</span> <span class="n">A</span><span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">prod</span><span class="o">.</span><span class="n">I</span>
</span><span class="line"><span class="k">print</span> <span class="n">result</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vecd</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;The above should be equal to vecx&quot;</span>
</span><span class="line"><span class="k">print</span> <span class="n">vecx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The resulting <script type="math/tex">\hat{x}</script> = <code>[[  481026.00000002]
 [  580284.00000003]
 [  496708.00000001]
 [ 1206919.00000001]
 [ 5787100.00000011]
 [ 1458137.00000003]
 [ 1392835.00000001]
 [ 1024517.00000002]
 [ 1223897.00000001]
 [ 5133698.00000016]
 [ 3691586.0000002 ]
 [ 2564883.        ]
 [ 1218544.00000002]
 [  740624.00000001]
 [ 2706124.00000001]]</code></p>

<p>which, disregarding rounding numerical approximation errors, is exactly our precomputed total industrial output vector
 <code>[[  481026.]
 [  580284.]
 [  496708.]
 [ 1206919.]
 [ 5787100.]
 [ 1458137.]
 [ 1392835.]
 [ 1024517.]
 [ 1223897.]
 [ 5133698.]
 [ 3691586.]
 [ 2564883.]
 [ 1218544.]
 [  740624.]
 [ 2706124.]]</code></p>

<p>Next time we will use this algorithm of computing <script type="math/tex">C</script> and <script type="math/tex">\hat{d}</script> over all of our historical data,
 perform some statistical analysis on this and then try to extrapolate values for <script type="math/tex">\hat{x}</script>.  Source code is available on
 my <a href="https://github.com/dhurley14/LeontiefIOModel">GitHub</a>.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topic Analysis and Marc Andreessen's Tweets]]></title>
    <link href="http://dhurley14.github.io/blog/2015/01/11/marc-andreessen-lda/"/>
    <updated>2015-01-11T22:43:07-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/01/11/marc-andreessen-lda</id>
    <content type="html"><![CDATA[<h2 id="background-motivation">Background Motivation</h2>
<p>I began this experiment with topic analysis on a friend’s suggestion on utilizing the treasure trove that is twitter.
Marc Andreessen retweets a ton of different people all the time.  It’s impossible to keep up with what those people’s interests are,
and more specifically what pmarca’s interests are.  I wanted to learn what exactly are the “Top Ten Things” that Marc Andreessen retweets, and how does he feel about these topics?
<!-- more --></p>

<p>As we all know, a retweet basically widdles down to agreeing with the tweet’s author.  This is where I decided to begin
researching topic analysis with Latent Dirichlet Allocation.</p>

<p>The first part of this blog series will cover a review of how I acquired the twitter data and the steps I took to get the the top
ten topics pmarca retweets. This blog owes a special thanks to the tutorial blog from <a href="http://blog.mathandpencil.com/using-latent-dirichlet-allocation-to-categorize-my-twitter-feed/">mathandpencil</a>.  The second part of this blog series will cover sentiment analysis on the tweets that are associated
with each topic.  Thus giving us an overview of how Marc Andreessen feels about specific topics he tweets about, based on people he 
retweets.</p>

<h3 id="acquiring-pmarcas-tweets">Acquiring pmarca’s Tweets</h3>
<p>I utilized the <a href="https://pypi.python.org/pypi/twython/">twython</a> library to acquire the tweets.  Unfortunately, Twitter’s api limits you to the 3200 most recent tweets so a quick introduction to the API might be useful to some.  The file containing all of this logic is the aptly named (I think at least) get_tweets.py.</p>

<p>I first needed access to the Twitter API.  Twython makes this extrememly easy and all I need to do is add my <code>APP_KEY</code> and <code>APP_SECRET</code> for authorization.
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="Python"><span class="line"><span class="kn">from</span> <span class="nn">twython</span> <span class="kn">import</span> <span class="n">Twython</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_authentication</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Get a connection to the Twitter API using Twython.</span>
</span><span class="line"><span class="sd">    return a new instance of the Twython object.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">APP_KEY</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
</span><span class="line">    <span class="n">APP_SECRET</span> <span class="o">=</span> <span class="s">&#39;xxxxx&#39;</span>
</span><span class="line">    <span class="n">twitter</span> <span class="o">=</span> <span class="n">Twython</span><span class="p">(</span><span class="n">APP_KEY</span><span class="p">,</span> <span class="n">APP_SECRET</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">twitter</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
The next step was to get the user’s tweets.  The <code>**kwargs</code> were necessary so that I could loop through the Twitter API and acquire all 3200 of pmarca’s most recent tweets (again Twitter doesn’t allow you to access all of a user’s tweets).
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="Python"><span class="line"><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#39;pmarca&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Get a user&#39;s timeline</span>
</span><span class="line"><span class="sd">    :param username: (default pmarca)</span>
</span><span class="line"><span class="sd">    :param tweetID: </span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">twitter</span> <span class="o">=</span> <span class="n">get_authentication</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c"># to get all 3200 possible tweets, I must cycle</span>
</span><span class="line">    <span class="c"># through, and change the max_id on each call to be the lowest</span>
</span><span class="line">    <span class="c"># id , so that my next call gets all the tweets below that id,</span>
</span><span class="line">    <span class="c"># and so on and so forth.</span>
</span><span class="line">    <span class="n">user_timeline</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">twitter</span><span class="o">.</span><span class="n">get_user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">twitter</span><span class="o">.</span><span class="n">get_user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">max_id</span><span class="o">=</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;anId&#39;</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">user_timeline</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Now that I have my authentication and a way to get the user’s timeline (note that <code>count=200</code> is the max amount of tweets from a user’s timeline you can receive before having to paginate, which is what I will show next), I will build a python dict that will store the tweets and the hyperlinks that the tweet links to.  This will help me perform sentiment analysis on the topics using the tweets as my sentiment indicators.</p>

<p>To get the next oldest 200 tweets, and so on and so forth until I max out at 3200, I had to loop through get_tweets(), setting the <code>tweetID</code> parameter to the ID of the last tweet that I received in the previous API call.  I do this 16 times in total (hence, 3200 tweets).  I then write all of the tweets to a file called <code>pmarca_rts_append.txt</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">def</span> <span class="nf">output_all_rts</span><span class="p">():</span>
</span><span class="line">    <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">get_tweets</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c"># the below will build the first entry in our dict.  The dict will map tweet&#39;s and their corresponding URL&#39;s that were found in the tweets.</span>
</span><span class="line">    <span class="n">urls</span> <span class="o">=</span> <span class="p">{</span><span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;expanded_url&#39;</span><span class="p">]:</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">))</span> <span class="k">if</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">]</span> <span class="ow">and</span> <span class="s">&quot;RT&quot;</span> <span class="ow">in</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
</span><span class="line">        <span class="n">user_timeline</span> <span class="o">=</span> <span class="n">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#39;pmarca&#39;</span><span class="p">,</span><span class="n">anId</span><span class="o">=</span><span class="n">user_timeline</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span><span class="line">        <span class="c"># Now I update that dict again to map more tweet&#39;s and URL&#39;s together</span>
</span><span class="line">        <span class="c"># this will help when I have to perform sentiment analysis on each topic.</span>
</span><span class="line">        <span class="n">urls</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;expanded_url&#39;</span><span class="p">]:</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">user_timeline</span><span class="p">))</span>
</span><span class="line">            <span class="k">if</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;entities&#39;</span><span class="p">][</span><span class="s">&#39;urls&#39;</span><span class="p">]</span> <span class="ow">and</span> <span class="s">&quot;RT&quot;</span> <span class="ow">in</span> <span class="n">user_timeline</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;text&#39;</span><span class="p">]})</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">output_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;pmarca_rts_links_dict.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w+b&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">output_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">urls</span><span class="p">))</span>
</span><span class="line">    <span class="n">output_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">output_all_rts</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now I have all of pmarca’s retweets (which turns out to be 1/2 of all of his tweets returned by the API).
Next up will be to extract the text from the associated links.  </p>

<p>In order to build my LDA model I needed to find a way to extract the body of the text from each article for which I had links to.  On the <a href="http://blog.mathandpencil.com/using-latent-dirichlet-allocation-to-categorize-my-twitter-feed/">mathandpencil</a> blog, Joseph Misiti uses Diffbot to acquire the text body.  Unfortunately my Diffbot account is no longer active so I used the extremely handy <a href="https://github.com/misja/python-boilerpipe">python-boilerpipe wrapper</a> library to handle this for me.</p>

<p>First, I needed to strip out the URL’s from the dictionary I built when I extracted the links from the tweets.  At this point, I figured it would be better to just
map the tweets to the article body itself.  So I wrote a script to do that.  </p>

<p>By passing in the dict I had saved previously <code>pmarca_rts_links_dict.txt</code> I was able to extract the text from the hyperlinks and map the body article text to the 
tweets (I used <code>|||</code> as the chars to separate the tweet and the article body text).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="kn">from</span> <span class="nn">boilerpipe.extract</span> <span class="kn">import</span> <span class="n">Extractor</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">ast</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot; Read a dict file mapping, get the urls, </span>
</span><span class="line">
</span><span class="line"><span class="sd">extract the text, send a mapping of the text </span>
</span><span class="line"><span class="sd">and the associated url, close the file</span>
</span><span class="line"><span class="sd">01/19/2015</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">buildMapping</span><span class="p">(</span><span class="n">someDictFile</span><span class="p">):</span>
</span><span class="line"><span class="n">somedata</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">someDictFile</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">somedata</span><span class="p">)</span>
</span><span class="line"><span class="n">keySize</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span><span class="line"><span class="n">successRatio</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="n">linksLeft</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="n">target</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;content_link_mapping.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class="line">
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">extractor</span> <span class="o">=</span> <span class="n">Extractor</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="s">&#39;ArticleSentencesExtractor&#39;</span><span class="p">,</span><span class="n">url</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;got the extractor&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="c">#target.write(str(result[key])+&quot;|||&quot;+extractor.getText().encode(&#39;utf-8&#39;)+&#39;\n\n\n&#39;)</span>
</span><span class="line">        <span class="n">target</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; ||| &quot;</span><span class="o">+</span><span class="n">extractor</span><span class="o">.</span><span class="n">getText</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span> <span class="c">#</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;wrote data&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">successRatio</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">linksLeft</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;[+] SUCCESS    &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">keySize</span> <span class="o">-</span> <span class="n">linksLeft</span><span class="p">))</span>
</span><span class="line">    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">        <span class="n">linksLeft</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;[-] FAILURE - &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="o">+</span> <span class="s">&quot; --- &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">keySize</span> <span class="o">-</span> <span class="n">linksLeft</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">target</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Success Ratio : &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">successRatio</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">keySize</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line"><span class="n">buildMapping</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The boilerpipe python wrapper ended up extracting text from a little over 78% of the hyperlinks I passed through to it.  I have no idea if this is because
the hyperlinks I sent it were 78% articles and the rest video’s or pictures but I’m fairly happy with that.  I ended up with around 600 articles of text I could use
to extract data from.</p>

<p>Next we clean up the corpus and the result can be found <a href="https://raw.githubusercontent.com/dhurley14/pmarcaRTS/master/src/actual/newcorpus.txt">here</a> (The file is 
3.5 MB of just text FYI).
We now have a corpus we can use to build our LDA model.  </p>

<h3 id="lda-model-results">LDA model results</h3>
<p>I used the <a href="http://radimrehurek.com/gensim/index.html">gensim</a> package which has an implementation of the LDA algorithm and a very nice tutorial on how to utilize it.  After building the model I got the top ten (and <a href="https://github.com/dhurley14/pmarcaRTS/blob/master/src/actual/tmp/16topics.txt">16</a> after reading <a href="http://a16z.com/2015/01/22/16-things/">this</a>) topics Marc Andreessen retweets the most.  After looking at the top words for each topic (<a href="https://github.com/dhurley14/pmarcaRTS/blob/master/src/actual/tmp/10topics.txt">which can be viewed here</a>), I came up with the following list of topics (in no particular order):</p>

<h4 id="world-issues-economic--political">1. World Issues (economic &amp; political)</h4>
<p>####2. American Military (editorialized, sorry :(
####3. Healthcare
####4. Venture Capital
####5. Bitcoin Blockchain
####6. ??? 
####7. European Economic Policy
####8. Psychology
####9. Oil Crisis
####10. Gay rights</p>

<p>To generate a more comprehensive set of topics, it certainly would’ve been nice to have acquired more than approximately 700 articles.  I also do not fully understand how the LDA algorithm works so I’m sure by playing around with parameters in the LDA model I could more closely approximate the topics. I also believe that some of these topics seem far fetched because pmarca was probably only tweeting about a couple of these topics at the time. In addition to this, my sample size was limited to the most recent 3200 tweets, so whatever topics are there are the most commonly seen topics from pmarca’s last 3200 tweets. Soon will be part 2 of this post, where I examine the sentiment of the tweets associated with these topics.  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://dhurley14.github.io/blog/2015/01/07/hello/"/>
    <updated>2015-01-07T22:11:51-05:00</updated>
    <id>http://dhurley14.github.io/blog/2015/01/07/hello</id>
    <content type="html"><![CDATA[<p>Hello world!</p>

<p>The title for this blog is supposed to be a play on words of AdventureLand (i.e. AdventureLDA or AdventureLand).  Just a place to have fun ;)
In this blog I will be examining a ton of different applications of machine learning algorithms. 
Hopefully the results of these blog posts are interesting to people.  Here’s to an adventure in machine learning!</p>
]]></content>
  </entry>
  
</feed>
